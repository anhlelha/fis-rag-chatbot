#!/usr/bin/env python3.8
"""
Script x·ª≠ l√Ω file Markdown (.md) cho RAG Pipeline
ƒê·ªçc file .md, tr√≠ch xu·∫•t n·ªôi dung text v√† metadata
"""

import os
import sys
import re
import json
from datetime import datetime
from pathlib import Path

def extract_metadata_from_md(file_path):
    """Tr√≠ch xu·∫•t metadata t·ª´ file markdown"""
    metadata = {
        'file_name': os.path.basename(file_path),
        'file_path': file_path,
        'file_size': os.path.getsize(file_path),
        'created_time': datetime.fromtimestamp(os.path.getctime(file_path)).isoformat(),
        'modified_time': datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat(),
        'title': None,
        'headings': []
    }
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # T√¨m title (heading ƒë·∫ßu ti√™n)
        title_match = re.search(r'^#\s+(.+)$', content, re.MULTILINE)
        if title_match:
            metadata['title'] = title_match.group(1).strip()
        
        # T√¨m t·∫•t c·∫£ headings
        headings = re.findall(r'^(#{1,6})\s+(.+)$', content, re.MULTILINE)
        metadata['headings'] = [(len(h[0]), h[1].strip()) for h in headings]
        
    except Exception as e:
        print(f"L·ªói ƒë·ªçc metadata t·ª´ {file_path}: {e}")
    
    return metadata

def process_markdown_file(file_path):
    """X·ª≠ l√Ω m·ªôt file markdown"""
    print(f"ƒêang x·ª≠ l√Ω: {file_path}")
    
    try:
        # ƒê·ªçc n·ªôi dung file
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Tr√≠ch xu·∫•t metadata
        metadata = extract_metadata_from_md(file_path)
        
        # L√†m s·∫°ch n·ªôi dung (lo·∫°i b·ªè markdown syntax c∆° b·∫£n)
        clean_content = clean_markdown_content(content)
        
        # Th·ªëng k√™
        stats = {
            'total_chars': len(content),
            'clean_chars': len(clean_content),
            'lines': len(content.split('\n')),
            'words': len(clean_content.split()),
            'headings_count': len(metadata['headings'])
        }
        
        result = {
            'metadata': metadata,
            'content': content,
            'clean_content': clean_content,
            'stats': stats
        }
        
        print(f"‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: {stats['words']} t·ª´, {stats['headings_count']} headings")
        return result
        
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω {file_path}: {e}")
        return None

def clean_markdown_content(content):
    """L√†m s·∫°ch n·ªôi dung markdown"""
    # Lo·∫°i b·ªè markdown syntax c∆° b·∫£n
    clean = content
    
    # Lo·∫°i b·ªè headers markdown
    clean = re.sub(r'^#{1,6}\s+', '', clean, flags=re.MULTILINE)
    
    # Lo·∫°i b·ªè bold/italic
    clean = re.sub(r'\*\*([^*]+)\*\*', r'\1', clean)  # **bold**
    clean = re.sub(r'\*([^*]+)\*', r'\1', clean)      # *italic*
    clean = re.sub(r'__([^_]+)__', r'\1', clean)      # __bold__
    clean = re.sub(r'_([^_]+)_', r'\1', clean)        # _italic_
    
    # Lo·∫°i b·ªè links
    clean = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', clean)  # [text](url)
    
    # Lo·∫°i b·ªè code blocks
    clean = re.sub(r'```[^`]*```', '', clean, flags=re.DOTALL)
    clean = re.sub(r'`([^`]+)`', r'\1', clean)  # inline code
    
    # Lo·∫°i b·ªè multiple spaces v√† newlines
    clean = re.sub(r'\n\s*\n', '\n\n', clean)
    clean = re.sub(r' +', ' ', clean)
    
    return clean.strip()

def main():
    if len(sys.argv) != 2:
        print("S·ª≠ d·ª•ng: python3.8 process_md.py <file_path.md>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    
    if not os.path.exists(file_path):
        print(f"File kh√¥ng t·ªìn t·∫°i: {file_path}")
        sys.exit(1)
    
    if not file_path.lower().endswith('.md'):
        print(f"File kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng .md: {file_path}")
        sys.exit(1)
    
    # X·ª≠ l√Ω file
    result = process_markdown_file(file_path)
    
    if result:
        # In th√¥ng tin metadata
        print("\nüìã METADATA:")
        print(f"Title: {result['metadata']['title']}")
        print(f"File: {result['metadata']['file_name']}")
        print(f"Size: {result['metadata']['file_size']} bytes")
        print(f"Words: {result['stats']['words']}")
        print(f"Headings: {result['stats']['headings_count']}")
        
        print("\nüìñ CONTENT PREVIEW (first 300 chars):")
        preview = result['clean_content'][:300]
        print(f"{preview}{'...' if len(result['clean_content']) > 300 else ''}")
        
        # L∆∞u k·∫øt qu·∫£ ra file JSON
        output_file = f"/opt/rag-copilot/output/{Path(file_path).stem}_processed.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£: {output_file}")
    
if __name__ == "__main__":
    main() 